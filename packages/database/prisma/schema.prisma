datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

model UserSession {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum RequestType {
  KIOSK
  MESSENGER
}

enum UserType {
  KIOSK
  MESSENGER
}

enum RequestStatus {
  PENDING
  FAILED
  SUCCESS
}

enum Gender {
  MALE
  FEMALE
}

model Images {
  id                   Int                 @id @default(autoincrement())
  userFaceGenRequestId String
  user                 UserFaceGenRequests @relation(fields: [userFaceGenRequestId], references: [id])
  imageResult          String
  prompt               String
  gcpStoragePath       String?
  gcpSignedUrl         String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @default(now())
}

model User {
  id                                      String                @id @default(cuid())
  facebookUserId                          String?               @unique
  name                                    String?
  gender                                  Gender?
  isEighteenAndAbove                      Boolean?
  email                                   String?
  userType                                UserType
  sessions                                UserSession[]
  requests                                UserFaceGenRequests[]
  imageGenerationState                    String?
  conversationId                          String?
  createdAt                               DateTime              @default(now())
  updatedAt                               DateTime              @default(now())
  UserTickets                             UserTickets[]
  iAgreeToPrivacyPolicyTermsAndConditions Boolean?
}

model UserFaceGenRequests {
  id             String        @id
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  facebookUserId String?
  imageResult    String?
  requestType    RequestType
  requestStatus  RequestStatus
  imageUrls      String[]
  prompt         String?
  tune           String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now())
  Images         Images[]

  @@index([userId])
}

model UserTickets {
  id        String   @id
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

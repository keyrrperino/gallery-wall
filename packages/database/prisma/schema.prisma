datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATION_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider         = "zod-prisma-types"
  output           = "../src/zod"
  createInputTypes = false
  addIncludeType   = false
  addSelectType    = false
}

model UserSession {
  id        String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@index([userId])
}

enum UserType {
  PC
  IPAD
}

enum RequestStatus {
  PENDING
  EXTRACTING_FRAMES
  DONE_EXTRACTING_FRAMES
  FAILED
  SUCCESS
}

enum FrameStatus {
  PENDING
  FAILED
  SUCCESS
}

enum GifStatus {
  PENDING
  FAILED
  SUCCESS
}

model Frame {
  id            String         @id
  userRequestId String
  userRequest   UserGifRequest @relation(fields: [userRequestId], references: [id])
  imageUrl      String
  frameStatus   FrameStatus
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now())
}

model User {
  id        String           @id @default(cuid())
  email     String?
  name      String?
  userType  UserType
  sessions  UserSession[]
  requests  UserGifRequest[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now())
}

model UserGifRequest {
  id            String        @id
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  gifUrl        String?
  requestStatus RequestStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  Frames        Frame[]

  @@index([userId])
}
